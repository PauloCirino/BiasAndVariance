Ytrain = trainData$Data$Y,
flexibility = flex,
Xtest = XTest)
YTestPredictMatrix[, nModel] <- modelResult
if(nModel == 1){
YpredTrain <- modelFun(  Xtrain = trainData$Data$X,
Ytrain = trainData$Data$Y,
flexibility = flex,
Xtest = trainData$Data$X)
trainDataSample[[flex]] <- data.frame(X = trainData$Data$X,
Y = trainData$Data$Y,
Ypred = YpredTrain)
testDataSample[[flex]] <- data.frame(  X = XTest,
Y = modelResult)
}
}
meanMSE <- mean( apply(YTestPredictMatrix, 2, function(x){
mean( (x - YTestExpected) ** 2 )
}))
meanBias <- mean( (YTestExpected - apply(YTestPredictMatrix, 1, mean)) ** 2 )
meanVariance <- mean( apply(YTestPredictMatrix, 1, var) )
meanErrorVar <- mean(noiseVar)
resultDF <- resultDF %>%
dplyr::bind_rows(
data.frame(MSE = meanMSE,
Bias = meanBias,
Variance = meanVariance,
erroVar = meanErrorVar,
Flexibility = flex)
)
}
list(dataOrigin = testData$Data,
trainSample = trainDataSample,
testSample = testDataSample,
meanMSETest = resultDF$MSE,
meanBias = resultDF$Bias,
meanVar = resultDF$Variance,
noiseVar = mean(resultDF$erroVar)
)
}
reactiveResults$noiseVar <- mean(reactiveResults$noiseVar)
plotly::plot_ly() %>%
plotly::add_trace(x = 1:length(reactiveResults$meanMSETest),
y = reactiveResults$meanMSETest,
name = 'MSE',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 5,
dash = 'dash')
) %>%
plotly::add_trace(x = 1:length(reactiveResults$meanBias),
y = reactiveResults$meanBias,
name = 'Bias2',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 3)
) %>%
plotly::add_trace(x = 1:length(reactiveResults$meanVar),
y = reactiveResults$meanVar,
name = 'Variance',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 3)
) %>%
plotly::add_trace(x = 1:length(reactiveResults$meanVar),
y = rep(reactiveResults$noiseVar,
length(reactiveResults$meanVar)),
name = 'Noise',
type = 'scatter',
mode = 'lines',
line = list(width = 1)
)
plotly::plot_ly() %>%
plotly::add_trace(x = 1:length(reactiveResults$meanMSETest),
y = reactiveResults$meanMSETest,
name = 'MSE',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 5,
dash = 'dash')
) %>%
plotly::add_trace(x = 1:length(reactiveResults$meanBias),
y = reactiveResults$meanBias,
name = 'Bias2',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 3)
) %>%
plotly::add_trace(x = 1:length(reactiveResults$meanVar),
y = reactiveResults$meanVar,
name = 'Variance',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 3)
) %>%
plotly::add_trace(x = 1:length(reactiveResults$meanVar),
y = rep(reactiveResults$noiseVar,
length(reactiveResults$meanVar)),
name = 'Noise',
type = 'scatter',
mode = 'lines',
line = list(width = 1)
) %>%
plotly::layout(xaxis = list(title = "Error"),
yaxis = list (title = "Flexibility",
rangemode = "tozero")
)
p
plotly::plot_ly() %>%
plotly::add_trace(x = 1:length(reactiveResults$meanMSETest),
y = reactiveResults$meanMSETest,
name = 'MSE',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 5,
dash = 'dash')
) %>%
plotly::add_trace(x = 1:length(reactiveResults$meanBias),
y = reactiveResults$meanBias,
name = 'Bias2',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 3)
) %>%
plotly::add_trace(x = 1:length(reactiveResults$meanVar),
y = reactiveResults$meanVar,
name = 'Variance',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 3)
) %>%
plotly::add_trace(x = 1:length(reactiveResults$meanVar),
y = rep(reactiveResults$noiseVar,
length(reactiveResults$meanVar)),
name = 'Noise',
type = 'scatter',
mode = 'lines',
line = list(width = 1)
) %>%
plotly::layout(xaxis = list(title = "Error"),
yaxis = list (title = "Flexibility",
rangemode = "tozero")
)
p <- plotly::plot_ly() %>%
plotly::add_trace(x = range(from = input$modelFlexibility[1],
to = input$modelFlexibility[2],
by = 1),
y = reactiveResults$meanMSETest,
name = 'MSE',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 5,
dash = 'dash')
) %>%
plotly::add_trace(x = range(from = input$modelFlexibility[1],
to = input$modelFlexibility[2],
by = 1),
y = reactiveResults$meanBias,
name = 'Bias2',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 3)
) %>%
plotly::add_trace(x = range(from = input$modelFlexibility[1],
to = input$modelFlexibility[2],
by = 1),
y = reactiveResults$meanVar,
name = 'Variance',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 3)
) %>%
plotly::add_trace(x = range(from = input$modelFlexibility[1],
to = input$modelFlexibility[2],
by = 1),
y = rep(reactiveResults$noiseVar,
length(reactiveResults$meanVar)),
name = 'Noise',
type = 'scatter',
mode = 'lines',
line = list(width = 1)
) %>%
plotly::layout(xaxis = list(title = "Error"),
yaxis = list (title = "Flexibility",
rangemode = "tozero")
)
p
input$modelFlexibility[1]
input$modelFlexibility[2]
input$modelFlexibility[1] <- 6
p <- plotly::plot_ly() %>%
plotly::add_trace(x = range(from = input$modelFlexibility[1],
to = input$modelFlexibility[2],
by = 1),
y = reactiveResults$meanMSETest,
name = 'MSE',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 5,
dash = 'dash')
) %>%
plotly::add_trace(x = range(from = input$modelFlexibility[1],
to = input$modelFlexibility[2],
by = 1),
y = reactiveResults$meanBias,
name = 'Bias2',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 3)
) %>%
plotly::add_trace(x = range(from = input$modelFlexibility[1],
to = input$modelFlexibility[2],
by = 1),
y = reactiveResults$meanVar,
name = 'Variance',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 3)
) %>%
plotly::add_trace(x = range(from = input$modelFlexibility[1],
to = input$modelFlexibility[2],
by = 1),
y = rep(reactiveResults$noiseVar,
length(reactiveResults$meanVar)),
name = 'Noise',
type = 'scatter',
mode = 'lines',
line = list(width = 1)
) %>%
plotly::layout(xaxis = list(title = "Error"),
yaxis = list (title = "Flexibility",
rangemode = "tozero")
)
p
p
modelFlexibility
input$modelFlexibility
range(from = input$modelFlexibility[1],
to = input$modelFlexibility[2],
by = 1)
range(from = input$modelFlexibility[1],
to = input$modelFlexibility[2],
by = 1)
input$modelFlexibility[1]
input$modelFlexibility[2]
input$modelFlexibility[1] : input$modelFlexibility[2],
input$modelFlexibility[1] : input$modelFlexibility[2]
p <- plotly::plot_ly() %>%
plotly::add_trace(x = input$modelFlexibility[1] : input$modelFlexibility[2],
y = reactiveResults$meanMSETest,
name = 'MSE',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 5,
dash = 'dash')
) %>%
plotly::add_trace(x = input$modelFlexibility[1] : input$modelFlexibility[2],
y = reactiveResults$meanBias,
name = 'Bias2',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 3)
) %>%
plotly::add_trace(x = input$modelFlexibility[1] : input$modelFlexibility[2],
y = reactiveResults$meanVar,
name = 'Variance',
type = 'scatter',
mode = 'lines+markers',
marker = list(size = 10,
line = list(color = 'rgba(0, 0, 0, .8)',
width = 3)),
line = list(width = 3)
) %>%
plotly::add_trace(x = input$modelFlexibility[1] : input$modelFlexibility[2],
y = rep(reactiveResults$noiseVar,
length(reactiveResults$meanVar)),
name = 'Noise',
type = 'scatter',
mode = 'lines',
line = list(width = 1)
) %>%
plotly::layout(xaxis = list(title = "Error"),
yaxis = list (title = "Flexibility",
rangemode = "tozero")
)
p
runApp()
reactiveResults$noiseVar
runApp()
runApp()
runApp()
runApp()
var(c(1,1,1,1))
runApp()
0.35 ** 2
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE, include = TRUE, eval = TRUE, fig.width = 10, warning = FALSE,
message = FALSE)
require('ggplot2')
require('dplyr')
require('Metrics')
K <- c(40, 20, 10, 5, 1)
require('FNN')
ModelFunc <- function(Xtrain, Ytrain, K, Xtest) {
fittedTrain <- FNN::knn.reg(train = as.matrix(Xtrain),
test = as.matrix(Xtest),
y = Ytrain,
k = K,
algorithm = "kd_tree")
fittedTrain$pred
}
f1 <- function(nObs = 40, minX = -8, maxX = 12, step = 0.1){
Xtrain <- runif(n = nObs, min = minX, max = maxX)
Ytrain <- ((Xtrain-2) * (2*Xtrain + 1)) / (1 + Xtrain**2)
noise <- ( rnorm(length(Ytrain), sd = 0.25))
Ytrain <- Ytrain + noise
Xtest <- seq(from = minX, to = maxX, by = step)
FXtest <- ((Xtest-2) * (2*Xtest + 1)) / (1 + Xtest**2)
noise <- ( rnorm(length(FXtest), sd = 0.25))
Ytest <- FXtest + noise
list(train = data.frame(Xtrain = Xtrain, Ytrain = Ytrain),
test = data.frame(Xtest = Xtest, Ytest = Ytest, FXtest = FXtest),
noiseVar = var(noise)
)
}
f2 <- function(nObs = 40, minX = 0, maxX = 6.28, step = 0.1){
Xtrain <- runif(n = nObs, min = minX, max = maxX)
Ytrain <- sin(Xtrain)
noise <- ( rnorm(length(Ytrain), sd = 0.1))
Ytrain <- Ytrain + noise
Xtest <- seq(from = minX, to = maxX, by = step)
FXtest <- sin(Xtest)
noise <- ( rnorm(length(FXtest), sd = 0.25))
Ytest <- FXtest + noise
list(train = data.frame(Xtrain = Xtrain, Ytrain = Ytrain),
test = data.frame(Xtest = Xtest, Ytest = Ytest, FXtest = FXtest),
noiseVar = var(noise)
)
}
Funcs <- c(f1, f2)
nObs = 40
nModels = 20
resultDF <- data.frame()
fPos <- 1
f <- eval(Funcs[[fPos]])
k <- K[kPos]
kPos <- 1
auxData <- f(nObs = nObs)
YTestExpected <- auxData$test$Ytest
YTestPredictMatrix <- matrix(ncol = nModels, nrow = length(YTestExpected))
noiseVar <- numeric(length = nModels)
for(nModel in 1:nModels){
nModel <- 1
partialData <- f(nObs = nObs)
noiseVar[nModel] <- partialData$noiseVar
modelResult <- ModelFunc(Xtrain = partialData$train$Xtrain,
Ytrain = partialData$train$Ytrain,
K = k,
Xtest = partialData$test$Xtest)
K[kPos]
k <- K[kPos]
auxData <- f(nObs = nObs)
YTestExpected <- auxData$test$Ytest
YTestPredictMatrix <- matrix(ncol = nModels, nrow = length(YTestExpected))
noiseVar <- numeric(length = nModels)
partialData <- f(nObs = nObs)
noiseVar[nModel] <- partialData$noiseVar
modelResult <- ModelFunc(Xtrain = partialData$train$Xtrain,
Ytrain = partialData$train$Ytrain,
K = k,
Xtest = partialData$test$Xtest)
YTestPredictMatrix[, nModel] <- modelResult
for(nModel in 1:nModels){
partialData <- f(nObs = nObs)
noiseVar[nModel] <- partialData$noiseVar
modelResult <- ModelFunc(Xtrain = partialData$train$Xtrain,
Ytrain = partialData$train$Ytrain,
K = k,
Xtest = partialData$test$Xtest)
YTestPredictMatrix[, nModel] <- modelResult
}
meanMSE <- mean( apply(YTestPredictMatrix, 2, function(x){
mean( (x - YTestExpected) ** 2 )
}))
meanBias <- mean( (FXtest - apply(YTestPredictMatrix, 1, mean)) ** 2 )
runApp()
runApp()
reactiveResults <- readRDS('reactiveResults.RDS')
dataOrigin <- reactiveResults$dataOrigin
dataNoise <- reactiveResults$trainSample[[1]]
dataOrigin
names(dataOrigin)
names(dataNoise)
runApp()
shiny::runApp()
reactiveResults <- readRDS('reactiveResults.RDS')
dataOrigin <- reactiveResults$dataOrigin
dataNoise <- reactiveResults$trainSample[[1]]
names(dataOrigin)
runApp()
runApp()
foo <- c(1, 10)
bar <- 3
foo <- c(3, 10)
bar <- 5
bar
10 - 5 + 3
flexibility <- 5
kRange <-c(3, 10)
10:3
kRange <- 10:3
flexibility <- 5
kRange[flexibility - min(kRange) + 1]
kRange[3:10 - min(kRange) + 1]
runApp()
runApp()
require('radomforest')
library(randomForest)
install.packages('randomForest')
library(randomForest)
require('randomForest')
?(randomForest)
?randomForest
X <- 0.1 * (1:100)
X
Y <- sin(X)
plot(X, Y)
Xtrain <- X
Ytrain <- Y
Xtest <- X
trainDF <- data.frame(Y = Ytrain, X = Xtrain)
testDF <- data.frame(X = Xtest)
model <- randomForest( Y ~ X, data = trainDF, ntree = flexibility)
predict(model, testDF)
class( predict(model, testDF))
plot( predict(model, testDF))
plot( X, predict(model, testDF))
flexibility
require(rpart)
require('rpart')
trainDF <- data.frame(Y = Ytrain, X = Xtrain)
testDF <- data.frame(X = Xtest)
?rpart
rpart.control
trainDF <- data.frame(Y = Ytrain, X = Xtrain)
testDF <- data.frame(X = Xtest)
trainDF <- data.frame(Y = Ytrain, X = Xtrain)
testDF <- data.frame(X = Xtest)
model <- rpart( Y ~ X, data = trainDF,
control = rpart.control( maxdepth = flexibility))
predict(model, testDF)
plot( predict(model, testDF))
model <- smooth.spline(x = Xtrain, y = Ytrain, df = flexibility)
predict(model, Xtest)
runApp()
runApp()
?svm
runApp()
runApp()
runApp()
