Bias = mean((partialData$test$Ytest-apply(allModelResult, 1, mean))**2),
Variance = mean(apply(allModelResult, 1, var)),
Flexibility = kPos,
Function = fPos)
)
}
}
p1 <- resultDF %>%
reshape2::melt(id = c("Flexibility", "Function")) %>%
dplyr::filter(Function == 1) %>%
dplyr::select(-Function) %>%
ggplot2::ggplot(aes(x = Flexibility, y = value, color = variable)) +
ggplot2::geom_line()
p2 <- resultDF %>%
reshape2::melt(id = c("Flexibility", "Function")) %>%
dplyr::filter(Function == 1) %>%
dplyr::select(-Function) %>%
ggplot2::ggplot(aes(x = Flexibility, y = value, color = variable)) +
ggplot2::geom_line()
p1
p2
p2 <- resultDF %>%
reshape2::melt(id = c("Flexibility", "Function")) %>%
dplyr::filter(Function == 2) %>%
dplyr::select(-Function) %>%
ggplot2::ggplot(aes(x = Flexibility, y = value, color = variable)) +
ggplot2::geom_line()
p1
p2
p2
p1
p2
allModelResult
apply(allModelResult, 1, mean)
plot(apply(allModelResult, 1, mean))
plot(partialData$test$Ytest)
(partialData$test$Ytest-apply(allModelResult, 1, mean))
(partialData$test$Ytest-apply(allModelResult, 1, mean))**2
mean((partialData$test$Ytest-apply(allModelResult, 1, mean))**2)
allModelResult
apply(allModelResult, 1, var)
allModelResult
var(allModelResult[1, ])
(apply(allModelResult, 1, var)
)
mean(apply(allModelResult, 1, var))
mean( apply(fittedTestList[[nFlex]], 1, var) )
mean( apply(fittedTestList[[nFlex]], 1, var)
allModelResult
allModelResult
allModelResult
Variance = mean(apply(allModelResult, 1, var)),
allModelResult
(apply(allModelResult, 1, var)
)
allModelResult
knitr::opts_chunk$set(echo = TRUE, include = TRUE, eval = TRUE, fig.width = 10, warning = FALSE,
message = FALSE)
require('ggplot2')
require('dplyr')
require('Metrics')
K <- c(40, 20, 10, 5, 1)
require('FNN')
ModelFunc <- function(Xtrain, Ytrain, K, Xtest) {
fittedTrain <- FNN::knn.reg(train = as.matrix(Xtrain),
test = as.matrix(Xtest),
y = Ytrain,
k = K,
algorithm = "kd_tree")
fittedTrain$pred
}
f1 <- function(nObs = 40, minX = -8, maxX = 12, step = 0.1){
Xtrain <- runif(n = nObs, min = minX, max = maxX)
Ytrain <- ((Xtrain-2) * (2*Xtrain + 1)) / (1 + Xtrain**2)
Ytrain <- Ytrain + ( rnorm(length(Ytrain), 0.1))
Xtest <- seq(from = minX, to = maxX, by = step)
Ytest <- ((Xtest-2) * (2*Xtest + 1)) / (1 + Xtest**2)
list(train = data.frame(Xtrain = Xtrain, Ytrain = Ytrain),
test = data.frame(Xtest = Xtest, Ytest = Ytest)
)
}
f2 <- function(nObs = 40, minX = 0, maxX = 6.28, step = 0.1){
Xtrain <- runif(n = nObs, min = minX, max = maxX)
Ytrain <- sin(Xtrain)
Ytrain <- Ytrain + ( rnorm(length(Ytrain), 0.1))
Xtest <- seq(from = minX, to = maxX, by = step)
Ytest <- sin(Xtest)
list(train = data.frame(Xtrain = Xtrain, Ytrain = Ytrain),
test = data.frame(Xtest = Xtest, Ytest = Ytest)
)
}
Funcs <- c(f1, f2)
nObs = 40
nModels = 20
resultDF <- data.frame()
for(fPos in 1:length(Funcs)){
f <- eval(Funcs[[fPos]])
for (kPos in 1:length(K)){
k <- K[kPos]
partialData <- f(nObs = nObs)
MSE <- numeric(length = nModels)
allModelResult <- matrix(nrow = length(partialData$test$Ytest),
ncol = nModels)
for(nModel in 1:nModels){
partialData <- f(nObs = nObs)
modelResult <- ModelFunc(Xtrain = partialData$train$Xtrain,
Ytrain = partialData$train$Ytrain,
K = k,
Xtest = partialData$test$Xtest)
MSE[nModel] <- mean( (partialData$test$Ytest - modelResult)**2 )
allModelResult[, nModel] <- modelResult
}
resultDF <- resultDF %>%
dplyr::bind_rows(
data.frame(MSE = mean(MSE[nModel]),
Bias = mean((partialData$test$Ytest-apply(allModelResult, 1, mean))**2),
Variance = mean(apply(allModelResult, 1, var)),
Flexibility = kPos,
Function = fPos)
)
}
}
partialData
runApp()
runApp()
nObs = 40
nModels = 20
resultDF <- data.frame()
for(fPos in 1:length(Funcs)){
f <- eval(Funcs[[fPos]])
for (kPos in 1:length(K)){
k <- K[kPos]
partialData <- f(nObs = nObs)
MSE <- numeric(length = nModels)
allModelResult <- matrix(nrow = length(partialData$test$Ytest),
ncol = nModels)
for(nModel in 1:nModels){
partialData <- f(nObs = nObs)
modelResult <- ModelFunc(Xtrain = partialData$train$Xtrain,
Ytrain = partialData$train$Ytrain,
K = k,
Xtest = partialData$test$Xtest)
MSE[nModel] <- mean( (partialData$test$Ytest - modelResult)**2 )
allModelResult[, nModel] <- modelResult
}
resultDF <- resultDF %>%
dplyr::bind_rows(
data.frame(MSE = mean(MSE[nModel]),
Bias = sqrt( mean((partialData$test$Ytest-apply(allModelResult, 1, mean))**2)),
Variance = mean(apply(allModelResult, 1, var)),
Flexibility = kPos,
Function = fPos)
)
}
}
p1 <- resultDF %>%
reshape2::melt(id = c("Flexibility", "Function")) %>%
dplyr::filter(Function == 1) %>%
dplyr::select(-Function) %>%
ggplot2::ggplot(aes(x = Flexibility, y = value, color = variable)) +
ggplot2::geom_line()
p2 <- resultDF %>%
reshape2::melt(id = c("Flexibility", "Function")) %>%
dplyr::filter(Function == 2) %>%
dplyr::select(-Function) %>%
ggplot2::ggplot(aes(x = Flexibility, y = value, color = variable)) +
ggplot2::geom_line()
p1
p2
p1
sqrt(0.1)
resultDF
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, include = TRUE, eval = TRUE, fig.width = 10, warning = FALSE,
message = FALSE)
require('ggplot2')
require('dplyr')
require('Metrics')
# Chunk 2
K <- c(40, 20, 10, 5, 1)
require('FNN')
ModelFunc <- function(Xtrain, Ytrain, K, Xtest) {
fittedTrain <- FNN::knn.reg(train = as.matrix(Xtrain),
test = as.matrix(Xtest),
y = Ytrain,
k = K,
algorithm = "kd_tree")
fittedTrain$pred
}
# Chunk 3
f1 <- function(nObs = 40, minX = -8, maxX = 12, step = 0.1){
Xtrain <- runif(n = nObs, min = minX, max = maxX)
Ytrain <- ((Xtrain-2) * (2*Xtrain + 1)) / (1 + Xtrain**2)
Ytrain <- Ytrain + ( rnorm(length(Ytrain), 0.05))
Xtest <- seq(from = minX, to = maxX, by = step)
Ytest <- ((Xtest-2) * (2*Xtest + 1)) / (1 + Xtest**2)
list(train = data.frame(Xtrain = Xtrain, Ytrain = Ytrain),
test = data.frame(Xtest = Xtest, Ytest = Ytest)
)
}
f2 <- function(nObs = 40, minX = 0, maxX = 6.28, step = 0.1){
Xtrain <- runif(n = nObs, min = minX, max = maxX)
Ytrain <- sin(Xtrain)
Ytrain <- Ytrain + ( rnorm(length(Ytrain), 0.05))
Xtest <- seq(from = minX, to = maxX, by = step)
Ytest <- sin(Xtest)
list(train = data.frame(Xtrain = Xtrain, Ytrain = Ytrain),
test = data.frame(Xtest = Xtest, Ytest = Ytest)
)
}
Funcs <- c(f1, f2)
# Chunk 4
nObs = 40
nModels = 20
resultDF <- data.frame()
for(fPos in 1:length(Funcs)){
f <- eval(Funcs[[fPos]])
for (kPos in 1:length(K)){
k <- K[kPos]
partialData <- f(nObs = nObs)
MSE <- numeric(length = nModels)
allModelResult <- matrix(nrow = length(partialData$test$Ytest),
ncol = nModels)
for(nModel in 1:nModels){
partialData <- f(nObs = nObs)
modelResult <- ModelFunc(Xtrain = partialData$train$Xtrain,
Ytrain = partialData$train$Ytrain,
K = k,
Xtest = partialData$test$Xtest)
MSE[nModel] <- mean( (partialData$test$Ytest - modelResult)**2 )
allModelResult[, nModel] <- modelResult
}
resultDF <- resultDF %>%
dplyr::bind_rows(
data.frame(MSE = mean(MSE[nModel]),
Bias = mean((partialData$test$Ytest-apply(allModelResult, 1, mean))**2),
Variance = mean(apply(allModelResult, 1, var)),
Flexibility = kPos,
Function = fPos)
)
}
}
# Chunk 5
p1 <- resultDF %>%
reshape2::melt(id = c("Flexibility", "Function")) %>%
dplyr::filter(Function == 1) %>%
dplyr::select(-Function) %>%
ggplot2::ggplot(aes(x = Flexibility, y = value, color = variable)) +
ggplot2::geom_line()
p2 <- resultDF %>%
reshape2::melt(id = c("Flexibility", "Function")) %>%
dplyr::filter(Function == 2) %>%
dplyr::select(-Function) %>%
ggplot2::ggplot(aes(x = Flexibility, y = value, color = variable)) +
ggplot2::geom_line()
p1
p2
p1
p2
View(resultDF)
View(resultDF %>% mutate(MSEBIAS = MSE + Bias))
sqrt(1)
sqrt(0.9)
sqrt(0.4)
sqrt(1)
sqrt(1.4)
plot(sqrt(-1000:1000) * 0.001)
plot(sqrt(0.01* (-1000:1000) )
)
0.01* (-1000:1000)
plot(sqrt(0.01* (0:1000) )
)
plot(sqrt(0.01* (0:1000) ))
p1
p2
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, include = TRUE, eval = TRUE, fig.width = 10, warning = FALSE,
message = FALSE)
require('ggplot2')
require('dplyr')
require('Metrics')
# Chunk 2
K <- c(40, 20, 10, 5, 1)
require('FNN')
ModelFunc <- function(Xtrain, Ytrain, K, Xtest) {
fittedTrain <- FNN::knn.reg(train = as.matrix(Xtrain),
test = as.matrix(Xtest),
y = Ytrain,
k = K,
algorithm = "kd_tree")
fittedTrain$pred
}
# Chunk 3
f1 <- function(nObs = 40, minX = -8, maxX = 12, step = 0.1){
Xtrain <- runif(n = nObs, min = minX, max = maxX)
Ytrain <- ((Xtrain-2) * (2*Xtrain + 1)) / (1 + Xtrain**2)
Ytrain <- Ytrain + ( rnorm(length(Ytrain), 0.005))
Xtest <- seq(from = minX, to = maxX, by = step)
Ytest <- ((Xtest-2) * (2*Xtest + 1)) / (1 + Xtest**2)
list(train = data.frame(Xtrain = Xtrain, Ytrain = Ytrain),
test = data.frame(Xtest = Xtest, Ytest = Ytest)
)
}
f2 <- function(nObs = 40, minX = 0, maxX = 6.28, step = 0.1){
Xtrain <- runif(n = nObs, min = minX, max = maxX)
Ytrain <- sin(Xtrain)
Ytrain <- Ytrain + ( rnorm(length(Ytrain), 0.005))
Xtest <- seq(from = minX, to = maxX, by = step)
Ytest <- sin(Xtest)
list(train = data.frame(Xtrain = Xtrain, Ytrain = Ytrain),
test = data.frame(Xtest = Xtest, Ytest = Ytest)
)
}
Funcs <- c(f1, f2)
# Chunk 4
nObs = 40
nModels = 20
resultDF <- data.frame()
for(fPos in 1:length(Funcs)){
f <- eval(Funcs[[fPos]])
for (kPos in 1:length(K)){
k <- K[kPos]
partialData <- f(nObs = nObs)
MSE <- numeric(length = nModels)
allModelResult <- matrix(nrow = length(partialData$test$Ytest),
ncol = nModels)
for(nModel in 1:nModels){
partialData <- f(nObs = nObs)
modelResult <- ModelFunc(Xtrain = partialData$train$Xtrain,
Ytrain = partialData$train$Ytrain,
K = k,
Xtest = partialData$test$Xtest)
MSE[nModel] <- mean( (partialData$test$Ytest - modelResult)**2 )
allModelResult[, nModel] <- modelResult
}
resultDF <- resultDF %>%
dplyr::bind_rows(
data.frame(MSE = mean(MSE[nModel]),
Bias = mean((partialData$test$Ytest-apply(allModelResult, 1, mean))**2),
Variance = mean(apply(allModelResult, 1, var)),
Flexibility = kPos,
Function = fPos)
)
}
}
# Chunk 5
p1 <- resultDF %>%
reshape2::melt(id = c("Flexibility", "Function")) %>%
dplyr::filter(Function == 1) %>%
dplyr::select(-Function) %>%
ggplot2::ggplot(aes(x = Flexibility, y = value, color = variable)) +
ggplot2::geom_line()
p2 <- resultDF %>%
reshape2::melt(id = c("Flexibility", "Function")) %>%
dplyr::filter(Function == 2) %>%
dplyr::select(-Function) %>%
ggplot2::ggplot(aes(x = Flexibility, y = value, color = variable)) +
ggplot2::geom_line()
p1
p2
p1
p2
p1
runApp()
runApp()
X <- runif(40, min = 0, max = 2*pi)
?rnorm
function(n, sd) {rnorm(n = n, sd = sd)}
?rexp
runApp()
runApp()
runApp()
auxData <- f(nObs = nObs)
meanMSE <- mean( apply(YTestPredictMatrix, 2, function(x){
mean( (x - YTestExpected) ** 2 )
}))
k <- K[kPos]
auxData <- f(nObs = nObs)
YTestExpected <- auxData$test$Ytest
YTestPredictMatrix <- matrix(ncol = nModels, nrow = length(YTestExpected))
for(nModel in 1:nModels){
partialData <- f(nObs = nObs)
modelResult <- ModelFunc(Xtrain = partialData$train$Xtrain,
Ytrain = partialData$train$Ytrain,
K = k,
Xtest = partialData$test$Xtest)
YTestPredictMatrix[, nModel] <- modelResult
}
meanMSE <- mean( apply(YTestPredictMatrix, 2, function(x){
mean( (x - YTestExpected) ** 2 )
}))
meanMSE
apply(YTestPredictMatrix, 2, function(x){
mean( (x - YTestExpected) ** 2
)
)
apply(YTestPredictMatrix, 2, function(x){
mean( (x - YTestExpected) ** 2 )
})
apply(YTestPredictMatrix, 1, mean)
meanMSE <- mean( apply(YTestPredictMatrix, 2, function(x){
mean( (x - YTestExpected) ** 2 )
}))
meanBias <- mean( (YTestExpected - apply(YTestPredictMatrix, 1, mean)) ** 2 )
meanBias
meanMSE
meanVariance <- mean( apply(YTestPredictMatrix, 1, var) )
meanVariance
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, include = TRUE, eval = TRUE, fig.width = 10, warning = FALSE,
message = FALSE)
require('ggplot2')
require('dplyr')
require('Metrics')
# Chunk 2
K <- c(40, 20, 10, 5, 1)
require('FNN')
ModelFunc <- function(Xtrain, Ytrain, K, Xtest) {
fittedTrain <- FNN::knn.reg(train = as.matrix(Xtrain),
test = as.matrix(Xtest),
y = Ytrain,
k = K,
algorithm = "kd_tree")
fittedTrain$pred
}
# Chunk 3
f1 <- function(nObs = 40, minX = -8, maxX = 12, step = 0.1){
Xtrain <- runif(n = nObs, min = minX, max = maxX)
Ytrain <- ((Xtrain-2) * (2*Xtrain + 1)) / (1 + Xtrain**2)
noise <- ( rnorm(length(Ytrain), sd = 0.005))
Ytrain <- Ytrain + noise
Xtest <- seq(from = minX, to = maxX, by = step)
Ytest <- ((Xtest-2) * (2*Xtest + 1)) / (1 + Xtest**2)
list(train = data.frame(Xtrain = Xtrain, Ytrain = Ytrain),
test = data.frame(Xtest = Xtest, Ytest = Ytest),
noiseVar = var(noise)
)
}
f2 <- function(nObs = 40, minX = 0, maxX = 6.28, step = 0.1){
Xtrain <- runif(n = nObs, min = minX, max = maxX)
Ytrain <- sin(Xtrain)
noise <- ( rnorm(length(Ytrain), sd = 0.005))
Ytrain <- Ytrain + noise
Xtest <- seq(from = minX, to = maxX, by = step)
Ytest <- sin(Xtest)
list(train = data.frame(Xtrain = Xtrain, Ytrain = Ytrain),
test = data.frame(Xtest = Xtest, Ytest = Ytest),
noiseVar = var(noise)
)
}
Funcs <- c(f1, f2)
# Chunk 4
nObs = 40
nModels = 20
resultDF <- data.frame()
for(fPos in 1:length(Funcs)){
f <- eval(Funcs[[fPos]])
for (kPos in 1:length(K)){
k <- K[kPos]
auxData <- f(nObs = nObs)
YTestExpected <- auxData$test$Ytest
YTestPredictMatrix <- matrix(ncol = nModels, nrow = length(YTestExpected))
noiseVar <- numeric(length = nModels)
for(nModel in 1:nModels){
partialData <- f(nObs = nObs)
noiseVar[nModel] <- partialData$noiseVar
modelResult <- ModelFunc(Xtrain = partialData$train$Xtrain,
Ytrain = partialData$train$Ytrain,
K = k,
Xtest = partialData$test$Xtest)
YTestPredictMatrix[, nModel] <- modelResult
}
meanMSE <- mean( apply(YTestPredictMatrix, 2, function(x){
mean( (x - YTestExpected) ** 2 )
}))
meanBias <- mean( (YTestExpected - apply(YTestPredictMatrix, 1, mean)) ** 2 )
meanVariance <- mean( apply(YTestPredictMatrix, 1, var) )
meanErrorVar <- mean(noiseVar)
resultDF <- resultDF %>%
dplyr::bind_rows(
data.frame(MSE = meanMSE,
Bias = meanBias,
Variance = meanVariance,
erroVar = meanErrorVar,
Flexibility = kPos,
Function = fPos)
)
}
}
# Chunk 5
p1 <- resultDF %>%
reshape2::melt(id = c("Flexibility", "Function")) %>%
dplyr::filter(Function == 1) %>%
dplyr::select(-Function) %>%
ggplot2::ggplot(aes(x = Flexibility, y = value, color = variable)) +
ggplot2::geom_line()
p2 <- resultDF %>%
reshape2::melt(id = c("Flexibility", "Function")) %>%
dplyr::filter(Function == 2) %>%
dplyr::select(-Function) %>%
ggplot2::ggplot(aes(x = Flexibility, y = value, color = variable)) +
ggplot2::geom_line()
p1
p2
resultDF
resultDF %>%
reshape2::melt(id = c("Flexibility", "Function")) %>%
dplyr::filter(Function == 1) %>%
dplyr::select(-Function)
p1
p2
runApp()
