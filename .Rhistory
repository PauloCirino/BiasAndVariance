generateOneModelAllFlex <- function(input, dataOrigin, modelFun, allResults, SEED = NULL){
if(! is.null(SEED) ) set.seed(seed = SEED)
dataNoiseTrain = generateNoiseData(input, trainData = TRUE)
modelsResults <- list()
flexValues <- seq(from = input$modelFlexibility[1],
to = input$modelFlexibility[2],
by = 1)
for(i in 1:length(flexValues)){
flexibility = flexValues[i]
modelResult <- modelFun(Xtrain = dataNoiseTrain$X,
Ytrain = dataNoiseTrain$Y,
flexibility = flexibility,
Xtest = dataOrigin$X)
mseTrain <- mse(modelResult$fittedTrain,  dataNoiseTrain$Y)
mseTest <- mse(modelResult$fittedTest, dataOrigin$Y)
modelsResults[[i]] <- list(flexibility = flexibility,
fittedTrain = modelResult$fittedTrain,
fittedTest = modelResult$fittedTest,
MSETrain = mseTrain,
MSETest = mseTest)
}
list(dataNoiseTrain = dataNoiseTrain,
modelsResults = modelsResults)
}
allData <- list()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
source('./src/genTrainTestAllData.R')
genTrainTestAllData <- function(input){
allModels <- list()
allData <- list()
for(i in 1:input$numTrainedModels) allModels[[i]] <- list()
dataOrigin = generateData(input)
modelFun <- getModelFunc(input = input)
for(i in 1:input$numTrainedModels){
model <- generateOneModelAllFlex(  input = input,
dataOrigin = dataOrigin,
modelFun = modelFun,
SEED = i)
allModels[[i]] <- model$modelsResults
allData[[i]] <- model$dataNoiseTrain
}
list(dataOrigin = dataOrigin,
allModelsList = allModels,
allDataList = allData)
}
runApp()
runApp()
shiny::runApp()
runApp()
source('./src/getModelFunc.R')
runApp()
# 'Regression Tree' 'Neural Network' 'Gradient Boosting'
getModelFunc <- function(input){
model <- input$model
fun <- switch (model,
'KNN' = callKNNFun(),
'SVM' = callSVNFun(),
'Polinomial Regression' = callPolinomialRegressionModel(),
'Neural Network' = callNeuralNetwork(),
'Gradient Boosting' = callGradientBoosting()
)
eval(fun)
}
callKNNFun <- function(){
require('FNN')
function(Xtrain, Ytrain, flexibility, Xtest) {
fittedTrain <- FNN::knn.reg(train = as.matrix(Xtrain),
test = as.matrix(Xtrain),
y = Ytrain,
k = flexibility,
algorithm = "kd_tree")
fittedTest <- FNN::knn.reg(train = as.matrix(Xtrain),
test = as.matrix(Xtest),
y = Ytrain,
k = flexibility,
algorithm = "kd_tree")
list(fittedTrain = fittedTrain$pred,
fittedTest = fittedTest$pred,
model = model)
}
}
callSVNFun <- function(){
require('e1071')
function(Xtrain, Ytrain, flexibility, Xtest) {
model <- e1071::svm( x = as.numeric(Xtrain),
y = Ytrain,
kernel = "polynomial",
type = "eps-regression",
degree = flexibility)
fittedTrain <- predict(model, as.numeric(Xtrain))
fittedTest <- predict(model, as.numeric(Xtest))
list(fittedTrain = fittedTrain,
fittedTest = fittedTest,
model = model)
}
}
callGradientBoosting <- function(){
require('xgboost')
function(Xtrain, Ytrain, flexibility, Xtest) {
params <- list(booster = 'gbtree',
objective = 'reg:linear',
silent = FALSE,
max_depth = flexibility)
model <- xgboost::xgboost( params = params,
data = matrix(as.numeric(Xtrain)),
label = as.numeric(Ytrain),
nrounds = 50
)
fittedTrain <- predict(model, matrix(as.numeric(Xtrain)))
fittedTest <- predict(model, matrix(as.numeric(Xtest)))
list(fittedTrain = fittedTrain,
fittedTest = fittedTest,
model = model)
}
}
#
# callNeuralNetwork <- function(){
#     require('RSNNS')
#     function(Xtrain, Ytrain, flexibility, Xtest) {
#         model <- RSNNS::mlp( x = as.matrix(Xtrain),
#                              y = as.matrix(Ytrain),
#                              size = c(flexibility, flexibility),
#                              learnFunc="Rprop",
#                              linOut=TRUE
#         )
#
#         fittedTrain <- as.numeric( predict(model, as.matrix(Xtrain)) )
#         fittedTest <- as.numeric( predict( model, as.matrix(Xtest) ) )
#
#         list(fittedTrain = fittedTrain,
#              fittedTest = fittedTest,
#              model = model)
#     }
# }
callNeuralNetwork <- function(){
require('nnet')
function(Xtrain, Ytrain, flexibility, Xtest) {
model <- nnet::nnet( x = as.matrix(Xtrain),
y = as.matrix(Ytrain),
size = flexibility,
maxit = 1000,
linout = TRUE
)
fittedTrain <- as.numeric( predict(model, as.matrix(Xtrain)) )
fittedTest <- as.numeric( predict( model, as.matrix(Xtest) ) )
list(fittedTrain = fittedTrain,
fittedTest = fittedTest,
model = model)
}
}
callPolinomialRegressionModel <- function(){
function(Xtrain, Ytrain, flexibility, Xtest){
trainDF <- data.frame(Y = Ytrain, X = Xtrain)
testDF <- data.frame(X = Xtest)
model <- lm( Y ~ poly(X, flexibility), data = trainDF )
fittedTrain <- fitted(model)
fittedTest <- predict(model, testDF)
list(fittedTrain = fittedTrain,
fittedTest = fittedTest,
model = model)
}
}
shiny::runApp()
runApp()
shiny::runApp()
runApp()
allModelsAndData <- readRDS(file = 'auxFile.rds')
allModelsAndData
runApp()
allModelsAndData <- readRDS(file = 'auxFile.rds')
length(allModelsAndData)
length(allModelsAndData[[1]])
class()
class(allModelsAndData[[1]])
names(allModelsAndData[[1]])
names(allModelsAndData)
length(dataOrigin
length(allModelsAndData$dataOrigin)
length(allModelsAndData$allModelsList)
allDataList <- allModelsAndData$allDataList
dataOrigin <- allModelsAndData$dataOrigin
allModelsList <- allModelsAndData$allModelsList
allDataList <- allModelsAndData$allDataList
length(allModelsList)
modelResult <- allModelsList[[i]]
modelResult
i <- 1
allModelsAndData$allDataList
names(modelResult)
modelResult
length(modelResult)
MSEList <- list()
?list
MSEList <- list()
length(MSEList) <- 6
MSEList
length(allModelsList[[i]])
length(allModelsList)
nModels <- length(allModelsList)
nFlex <- length(allModelsList[[1]])
dataOrigin <- allModelsAndData$dataOrigin
allModelsList <- allModelsAndData$allModelsList
allDataList <- allModelsAndData$allDataList
nModels <- length(allModelsList)
nFlexs <- length(allModelsList[[1]])
MSEList <- list()
length(MSEList) <- nFlexs
modelResult <- allModelsList[[nModel]][[nFlex]]
nModel <- 1
nFlex <- 1
modelResult <- allModelsList[[nModel]][[nFlex]]
modelResult
names(modelResult)
MSEList[[nFlex]] <- numeric()
MSEList <- list()
for(nFlex in 1:nFlex){
MSEList[[nFlex]] <- numeric()
MSEList
MSEList <- list()
for(nFlex in 1:nFlex){
MSEList[[nFlex]] <- numeric()
}
MSEList <- list()
for(nFlex in 1:nFlex){
MSEList[[nFlex]] <- numeric()
}
MSEList
nFlex
for(nFlex in 1:nFlexs){
MSEList[[nFlex]] <- numeric()
}
MSEList
nFlexs
nModels
dataOrigin <- allModelsAndData$dataOrigin
allModelsList <- allModelsAndData$allModelsList
allDataList <- allModelsAndData$allDataList
nModels <- length(allModelsList)
nFlexs <- length(allModelsList[[1]])
MSETrainList <- list()
MSETestList <- list()
for(nFlex in 1:nFlexs){
MSEList[[nFlex]] <- numeric()
MSETestList[[nFlex]] <- numeric()
}
for(nModel in 1:nModels){
for(nFlex in 1:nFlexs){
modelResult <- allModelsList[[nModel]][[nFlex]]
MSETrainList[[nFlex]][nModel] <- modelResult$MSETest
MSETestList[[nFlex]][nModel] <- modelResult$MSETest
}
}
nFlex
nModel
allModelsList[[nModel]][[nFlex]]
dataOrigin <- allModelsAndData$dataOrigin
allModelsList <- allModelsAndData$allModelsList
allDataList <- allModelsAndData$allDataList
nModels <- length(allModelsList)
nFlexs <- length(allModelsList[[1]])
MSETrainList <- list()
MSETestList <- list()
for(nFlex in 1:nFlexs){
MSEList[[nFlex]] <- numeric()
MSETestList[[nFlex]] <- numeric()
}
for(nModel in 1:nModels){
for(nFlex in 1:nFlexs){
print('(', i, j, ')')
modelResult <- allModelsList[[nModel]][[nFlex]]
MSETrainList[[nFlex]][nModel] <- modelResult$MSETest
MSETestList[[nFlex]][nModel] <- modelResult$MSETest
}
}
dataOrigin <- allModelsAndData$dataOrigin
allModelsList <- allModelsAndData$allModelsList
allDataList <- allModelsAndData$allDataList
nModels <- length(allModelsList)
nFlexs <- length(allModelsList[[1]])
MSETrainList <- list()
MSETestList <- list()
for(nFlex in 1:nFlexs){
MSEList[[nFlex]] <- numeric()
MSETestList[[nFlex]] <- numeric()
}
for(nModel in 1:nModels){
for(nFlex in 1:nFlexs){
print('\(', nModel, nFlex, '\)')
modelResult <- allModelsList[[nModel]][[nFlex]]
MSETrainList[[nFlex]][nModel] <- modelResult$MSETest
MSETestList[[nFlex]][nModel] <- modelResult$MSETest
}
}
for(nModel in 1:nModels){
for(nFlex in 1:nFlexs){
print('(', nModel, nFlex, ')')
modelResult <- allModelsList[[nModel]][[nFlex]]
MSETrainList[[nFlex]][nModel] <- modelResult$MSETest
MSETestList[[nFlex]][nModel] <- modelResult$MSETest
}
}
nFlexs
1:nFlexs
nFlex
MSETrainList <- list()
MSETestList <- list()
for(nFlex in 1:nFlexs){
MSEList[[nFlex]] <- numeric()
MSETestList[[nFlex]] <- numeric()
}
for(nModel in 1:nModels){
for(nFlex in 1:nFlexs){
print(paste(nModel, nFlex ))
modelResult <- allModelsList[[nModel]][[nFlex]]
MSETrainList[[nFlex]][nModel] <- modelResult$MSETest
MSETestList[[nFlex]][nModel] <- modelResult$MSETest
}
}
modelResult <- allModelsList[[nModel]][[nFlex]]
MSETrainList[[nFlex]][nModel] <- modelResult$MSETest
MSETrainList[[nFlex]]
for(nFlex in 1:nFlexs){
MSETrainList[[nFlex]] <- numeric()
MSETestList[[nFlex]] <- numeric()
}
for(nModel in 1:nModels){
for(nFlex in 1:nFlexs){
print(paste(nModel, nFlex ))
modelResult <- allModelsList[[nModel]][[nFlex]]
MSETrainList[[nFlex]][nModel] <- modelResult$MSETest
MSETestList[[nFlex]][nModel] <- modelResult$MSETest
}
}
meanMSETrain <- sapply(MSETrainList, mean)
meanMSETrain
meanMSETrain <- sapply(MSETrainList, mean)
meanMSETest <- sapply(MSETestList, mean)
meanMSETrain
meanMSETest
names(modelResult)
names(allModelsList[[1]])
names(allModelsList[[1]][[1]])
foo <- numeric()
foo <- foo + 1:100
foo
foo <- numeric()
foo
nTestObs <-  length(allModelsList[[1]][[1]]$fittedTest)
nTestObs
fittedTestList[[nFlex]] <- numeric(length = nTestObs)
dataOrigin <- allModelsAndData$dataOrigin
allModelsList <- allModelsAndData$allModelsList
allDataList <- allModelsAndData$allDataList
nModels <- length(allModelsList)
nFlexs <- length(allModelsList[[1]])
nTestObs <-  length(allModelsList[[1]][[1]]$fittedTest)
MSETrainList <- list()
MSETestList <- list()
fittedTestList <- list()
for(nFlex in 1:nFlexs){
MSETrainList[[nFlex]] <- numeric()
MSETestList[[nFlex]] <- numeric()
fittedTestList[[nFlex]] <- numeric(length = nTestObs)
}
fittedTestList
dataOrigin <- allModelsAndData$dataOrigin
allModelsList <- allModelsAndData$allModelsList
allDataList <- allModelsAndData$allDataList
nModels <- length(allModelsList)
nFlexs <- length(allModelsList[[1]])
nTestObs <-  length(allModelsList[[1]][[1]]$fittedTest)
MSETrainList <- list()
MSETestList <- list()
fittedTestList <- list()
for(nFlex in 1:nFlexs){
MSETrainList[[nFlex]] <- numeric()
MSETestList[[nFlex]] <- numeric()
fittedTestList[[nFlex]] <- numeric(length = nTestObs)
}
for(nModel in 1:nModels){
for(nFlex in 1:nFlexs){
modelResult <- allModelsList[[nModel]][[nFlex]]
MSETrainList[[nFlex]][nModel] <- modelResult$MSETest
MSETestList[[nFlex]][nModel] <- modelResult$MSETest
fittedTestList[[nFlex]] <- fittedTestList[[nFlex]] + modelResult$fittedTest
}
}
fittedTestList
dataOrigin <- allModelsAndData$dataOrigin
allModelsList <- allModelsAndData$allModelsList
allDataList <- allModelsAndData$allDataList
nModels <- length(allModelsList)
nFlexs <- length(allModelsList[[1]])
nTestObs <-  length(allModelsList[[1]][[1]]$fittedTest)
MSETrainList <- list()
MSETestList <- list()
fittedTestList <- list()
for(nFlex in 1:nFlexs){
MSETrainList[[nFlex]] <- numeric()
MSETestList[[nFlex]] <- numeric()
fittedTestList[[nFlex]] <- numeric(length = nTestObs)
}
for(nModel in 1:nModels){
for(nFlex in 1:nFlexs){
modelResult <- allModelsList[[nModel]][[nFlex]]
MSETrainList[[nFlex]][nModel] <- modelResult$MSETest
MSETestList[[nFlex]][nModel] <- modelResult$MSETest
fittedTestList[[nFlex]] <- fittedTestList[[nFlex]] + modelResult$fittedTest
}
}
for(nFlex in 1:nFlexs){
fittedTestList[[nFlex]] <- (fittedTestList[[nFlex]] / nModels)
}
fittedTestList[[1]]
biasList <- list()
dataOrigin <- allModelsAndData$dataOrigin
allModelsList <- allModelsAndData$allModelsList
allDataList <- allModelsAndData$allDataList
nModels <- length(allModelsList)
nFlexs <- length(allModelsList[[1]])
nTestObs <-  length(allModelsList[[1]][[1]]$fittedTest)
MSETrainList <- list()
MSETestList <- list()
fittedTestList <- list()
for(nFlex in 1:nFlexs){
MSETrainList[[nFlex]] <- numeric()
MSETestList[[nFlex]] <- numeric()
fittedTestList[[nFlex]] <- numeric(length = nTestObs)
}
for(nModel in 1:nModels){
for(nFlex in 1:nFlexs){
modelResult <- allModelsList[[nModel]][[nFlex]]
MSETrainList[[nFlex]][nModel] <- modelResult$MSETest
MSETestList[[nFlex]][nModel] <- modelResult$MSETest
fittedTestList[[nFlex]] <- fittedTestList[[nFlex]] + modelResult$fittedTest
}
}
biasList <- list()
for(nFlex in 1:nFlexs){
fittedTestList[[nFlex]] <- (fittedTestList[[nFlex]] / nModels)
biasList[[nFlex]] <- fittedTestList[[nFlex]] - dataOrigin$Y
}
biasList[[1]]
plot(biasList)
plot(biasList[[1]])
dataOrigin <- allModelsAndData$dataOrigin
allModelsList <- allModelsAndData$allModelsList
allDataList <- allModelsAndData$allDataList
nModels <- length(allModelsList)
nFlexs <- length(allModelsList[[1]])
nTestObs <-  length(allModelsList[[1]][[1]]$fittedTest)
MSETrainList <- list()
MSETestList <- list()
fittedTestList <- list()
for(nFlex in 1:nFlexs){
MSETrainList[[nFlex]] <- numeric()
MSETestList[[nFlex]] <- numeric()
fittedTestList[[nFlex]] <- numeric(length = nTestObs)
}
for(nModel in 1:nModels){
for(nFlex in 1:nFlexs){
modelResult <- allModelsList[[nModel]][[nFlex]]
MSETrainList[[nFlex]][nModel] <- modelResult$MSETest
MSETestList[[nFlex]][nModel] <- modelResult$MSETest
fittedTestList[[nFlex]] <- fittedTestList[[nFlex]] + modelResult$fittedTest
}
}
biasList <- list()
for(nFlex in 1:nFlexs){
fittedTestList[[nFlex]] <- (fittedTestList[[nFlex]] / nModels)
biasList[[nFlex]] <- (fittedTestList[[nFlex]] - dataOrigin$Y) ** 2
#varte
}
meanMSETest <- sapply(MSETestList, mean)
#meanBias <-
biasList
length(biasList)
biasList[[1]]
length(biasList[[1]])
meanBias <- numeric()
dataOrigin <- allModelsAndData$dataOrigin
allModelsList <- allModelsAndData$allModelsList
allDataList <- allModelsAndData$allDataList
nModels <- length(allModelsList)
nFlexs <- length(allModelsList[[1]])
nTestObs <-  length(allModelsList[[1]][[1]]$fittedTest)
MSETrainList <- list()
MSETestList <- list()
fittedTestList <- list()
for(nFlex in 1:nFlexs){
MSETrainList[[nFlex]] <- numeric()
MSETestList[[nFlex]] <- numeric()
fittedTestList[[nFlex]] <- numeric(length = nTestObs)
}
for(nModel in 1:nModels){
for(nFlex in 1:nFlexs){
modelResult <- allModelsList[[nModel]][[nFlex]]
MSETrainList[[nFlex]][nModel] <- modelResult$MSETest
MSETestList[[nFlex]][nModel] <- modelResult$MSETest
fittedTestList[[nFlex]] <- fittedTestList[[nFlex]] + modelResult$fittedTest
}
}
meanBias <- numeric()
for(nFlex in 1:nFlexs){
fittedTestList[[nFlex]] <- (fittedTestList[[nFlex]] / nModels)
meanBias[nFlex] <- mean( (fittedTestList[[nFlex]] - dataOrigin$Y) ** 2)
}
meanBias
meanMSETest
